" Escape a text value for inclusion in an option value
function! vimrc#EscapeSet(string) abort
  return escape(a:string, '\ |"')
endfunction

" Escape a text value for inclusion as an element in a comma-separated list
" option value.  Yes, the comma being the sole inner escaped character here is
" correct.  If you escape existing backslashes, you'll break it.
function! vimrc#EscapeSetList(string) abort
  return vimrc#EscapeSet(escape(a:string, ','))
endfunction

" Check that we have a plugin available, and will be loading it
function! vimrc#PluginReady(filename) abort
  return globpath(&runtimepath, 'plugin/'.a:filename.'.vim') !=# ''
        \ && &loadplugins
endfunction

function! vimrc#SplitOption(str) abort

  let esc = '\'
  let sep = ','

  let str = a:str
  let len = strlen(str)

  let parts = []
  let part = ''
  let idx = 0

  while idx < len

    let char = str[idx]
    if char ==# esc && str[idx+1] ==# sep
      let part .= sep
      let idx += 1
    elseif char ==# sep
      call add(list, part)
      let part = ''
    else
      let part .= char
    endif
    let idx += 1

  endwhile

  return parts

endfunction

" Convenience version function check that should work with 7.0 or newer;
" takes strings like 7.3.251
function! vimrc#Version(verstr) abort

  " Throw toys if the string doesn't match the expected format
  if a:verstr !~# '^\d\+\.\d\+.\d\+$'
    echoerr 'Invalid version string: '.a:verstr
  endif

  " Split version string into major, minor, and patch level integers
  let [major, minor, patch] = split(a:verstr, '\.')

  " Create a string like 801 from a version number 8.1 to compare it to
  " the v:version integer
  let ver = major * 100 + minor

  " Compare versions
  if v:version > ver
    return 1  " Current Vim is newer than the wanted one
  elseif ver < v:version
    return 0  " Current Vim is older than the wanted one
  else
    return has('patch'.patch)  " Versions equal, return patch presence
  endif

endfunction
