" Tom Ryder (tejr)'s vimrc: <https://sanctum.geek.nz/cgit/dotfiles.git>
" Requires Vim 7.0 or newer with +eval.

" Set an environment variable for the user runtime directory, if not already
" set; use the first element of &runtimepath, rather like 'spellfile'
if !exists('$MYVIM')
  let $MYVIM = expand(
        \ strpart(&runtimepath, 0, stridx(&runtimepath, ','))
        \ )
endif

" The all-important default indent settings; filetypes to tweak
set autoindent    " Use indent of previous line on new lines
set expandtab     " Use spaces instead of tabs
set shiftwidth=4  " Indent with four spaces

" Make insert mode tab key add the same number of spaces as 'shiftwidth', use
" negative value to do this if Vim new enough to support it
let &softtabstop = v:version > 703
      \ || v:version == 703 && has('patch693')
      \ ? -1 : &shiftwidth

" Allow me to backspace 'autoindent' spaces in insert mode, and back over the
" end of lines I've inserted in this session
set backspace=indent,eol

" Keep backup files in dedicated directory; add trailing double-slash to keep
" full path in name, if Vim is new enough to support that
set backup
execute 'set backupdir^='.escape($MYVIM, '\ ').'/cache/backup'
      \ . (has('patch-8.1.251') ? '//' : '')

" Add some *nix paths not to back up
if has('unix')
  set backupskip&  " Reset to avoid duplicates (Vim bug?)
  set backupskip+=/dev/shm/*  " Shared memory RAM disk
  set backupskip+=/usr/tmp/*  " Hard-coded path for `sudo -e` 1/2
  set backupskip+=/var/tmp/*  " Hard-coded path for `sudo -e` 2/2
endif

" Indent wrapped lines if supported (v7.4.338)
if exists('+breakindent')
  set breakindent
endif

" Clear default 'comments' and 'commentstring', filetype to handle
set comments=
set commentstring=

" Add completion options
set completeopt+=longest  " Insert longest common substring
set completeopt+=menuone  " Show the menu even if only one match

" Give me a prompt instead of just rejecting risky :write, :saveas
set confirm

" Sentence objects are separated by two spaces
set cpoptions+=J

" Keep swap files in dedicated directory, named with full path
set directory^=$MYVIM/cache/swap//

" If the environment didn't set an encoding, use UTF-8, not ASCII
if !exists('$LANG')
  set encoding=utf-8
endif

" Don't wait for a key after Escape in insert mode
" Not in Neovim
if exists('+esckeys')
  set noesckeys
endif

" Fold based on indent, but only when I ask
set foldlevelstart=99
set foldmethod=indent

" Delete comment leaders when joining lines, if supported
if v:version > 703
      \ || v:version == 703 && has('patch541')
  set formatoptions+=j
endif

" Don't break a single space after a period, if supported
if has('patch-8.1.728')
  set formatoptions+=p
endif

" Don't load GUI menus; set here before GUI starts or any filetype or syntax
" logic is performed
if has('gui_running')
  set guioptions+=M
endif

" Allow buffers to have changes without being displayed
set hidden

" Keep much more command and search history
set history=2000

" Highlight completed searches; clear on reload
set hlsearch
nohlsearch

" Don't assume I'm editing C; let the filetype set this
set include=

" Show search matches as I type my pattern
set incsearch

" Don't show a status line if there's only one window
" This is Vim's default, but not Neovim's
set laststatus=1

" Don't redraw the screen during batch execution
set lazyredraw

" Break lines at word boundaries
set linebreak

" Define extra 'list' display characters
set listchars&vi  " Neovim adds duplicates otherwise
set listchars+=tab:>-      " Tab characters, preserve width
set listchars+=trail:-     " Trailing spaces
set listchars+=extends:>   " Unwrapped text to screen right
set listchars+=precedes:<  " Unwrapped text to screen left
set listchars+=nbsp:+      " Non-breaking spaces

" Don't allow setting options via buffer content
set nomodeline

" Treat numbers with a leading zero as decimal, not octal
set nrformats-=octal

" Don't search /usr/include by default
set path-=/usr/include

" Disable command line display of file position if a system vimrc or Neovim
" has switched it on
set noruler

" Remove Debian's 'runtimepath' addenda if present
set runtimepath-=/var/lib/vim/addons
set runtimepath-=/var/lib/vim/addons/after

" Make sessions usable
set sessionoptions-=localoptions  " No buffer options or mappings
set sessionoptions-=options       " No global options or mappings

" Don't show startup splash screen (I donated)
set shortmess+=I

" Prefix wrapped rows with three dots
set showbreak=...

" New window positioning
set splitbelow  " Below the current window, not above
set splitright  " Right of the current window, not left

" Don't try to syntax highlight run-on lines
set synmaxcol=500

" PuTTY is a fast terminal, but Vim doesn't know that yet
if &term =~# '^putty'
  set ttyfast
endif

" Don't use terminal mouse support, even if it would work; the manual says to
" set 't_RV' to do this, but that doesn't seem to work
if exists('+ttymouse')  " No such option in Neovim
  set ttymouse=
endif

" Keep persistent undo files in dedicated directory, named with full path
if has('persistent_undo')  " v7.2.438
  set undofile
  set undodir^=$MYVIM/cache/undo//
endif

" Keep the viminfo file in the home Vim directory, mostly to stop history
" getting clobbered when something runs Vim without using this vimrc
let $VIMINFO = $MYVIM.'/cache/viminfo'
if exists('+viminfofile')  " Use new option method if we can (v8.1.716)
  set viminfofile=$VIMINFO
else  " Resort to clunkier method with 'viminfo' option flag
  execute 'set viminfo+=n'.escape($VIMINFO, '\ ')
endif

" Let me move beyond buffer text in visual block mode
set virtualedit+=block

" Never beep at me
set visualbell t_vb=

" Tab completion settings
set wildignore=*~,#*#,*.7z,.DS_Store,.git,.hg,.svn
      \,*.a,*.adf,*.asc,*.au,*.aup,*.avi
      \,*.bin,*.bmp,*.bz2
      \,*.class
      \,*.db,*.dbm,*.djvu,*.docx
      \,*.exe
      \,*.filepart,*.flac
      \,*.gd2,*.gif,*.gifv,*.gmo,*.gpg,*.gz
      \,*.hdf
      \,*.ico,*.iso
      \,*.jar,*.jpeg,*.jpg
      \,*.m4a,*.mid,*.mp3,*.mp4
      \,*.o,*.odp,*.ods,*.odt,*.ogg,*.ogv,*.opus
      \,*.pbm,*.pdf,*.png,*.ppt,*.psd,*.pyc
      \,*.rar,*.rm
      \,*.s3m,*.sdbm,*.sqlite,*.swf,*.swp
      \,*.tar,*.tga,*.ttf
      \,*.wav,*.webm
      \,*.xbm,*.xcf,*.xls,*.xlsx,*.xpm,*.xz
      \,*.zip
if exists('+wildignorecase')
  set wildignorecase  " Case insensitive, if supported (v7.3.072)
endif
set wildmode=list:longest  " Tab press completes and lists

" Load filetype settings, plugins, and maps
filetype plugin indent on

" Use syntax highlighting
if !exists('syntax_on')
  syntax enable
endif

" Try to use sahara color scheme with 'cursorline' set; otherwise, use the
" default color scheme with a dark background
try
  colorscheme sahara
  set cursorline
catch
  set background=dark
endtry

" Space bar scrolls down a page, :next if plugin available
if &loadplugins
  nmap <Space> <Plug>(ScrollNext)
else
  nnoremap <Space> <PageDown>
endif

" Remap insert Ctrl-C to undo the escaped insert operation
if &loadplugins  " Don't break the key if we won't be loading the plugin
  imap <C-C> <Plug>(InsertCancel)
endif

" Map double Ctrl-K in insert mode to search digraph names
imap <C-K><C-K> <Plug>(DigraphSearch)

" Stack Ctrl-L to clear search highlight, make it work in insert mode too
nmap <silent> <C-L> :<C-U>nohlsearch<CR><C-L>
inoremap <C-L> <C-O><C-L>
vnoremap <silent> <C-L> :<C-U>nohlsearch<CR>gv<C-L>

" Remap normal/visual & and g& to preserve substitution flags
nnoremap <silent> & :&&<CR>
xnoremap <silent> & :&&<CR>
nnoremap <silent> g& :<C-U>%&&<CR>

" Map g: as a 'colon operator'
nmap g: <Plug>(ColonOperator)

" Cycle through argument list
nnoremap [a :previous<CR>
nnoremap ]a :next<CR>
" Cycle through buffers
nnoremap [b :bprevious<CR>
nnoremap ]b :bnext<CR>
" Cycle through quickfix list items
nnoremap [c :cprevious<CR>
nnoremap ]c :cnext<CR>
" Cycle through location list items
nnoremap [l :lprevious<CR>
nnoremap ]l :lnext<CR>

" Insert blank lines around current line
nmap [<Space> <Plug>(PutBlankLinesAbove)
nmap ]<Space> <Plug>(PutBlankLinesBelow)

" Set leader keys
let mapleader = '\'
let maplocalleader = ','

" \a toggles 'formatoptions' 'a' flag using a plugin
nnoremap <Leader>a :<C-U>ToggleFlagLocal formatoptions a<CR>

" \b toggles settings friendly to copying and pasting
nmap <Leader>b <Plug>(CopyLinebreakToggle)

" \c toggles 'cursorline'; no visual mode map as it doesn't work
nnoremap <Leader>c :<C-U>setlocal cursorline! cursorline?<CR>
" \C toggles 'cursorcolumn'; works in visual mode
nnoremap <Leader>C :<C-U>setlocal cursorcolumn! cursorcolumn?<CR>
xnoremap <Leader>C :<C-U>setlocal cursorcolumn! cursorcolumn?<CR>gv

" \d inserts the local date (POSIX date)
nnoremap <Leader>d :read !date<CR>
" \D inserts the UTC date (POSIX date)
nnoremap <Leader>D :read !date -u<CR>

" \e forces a buffer to be editable
nnoremap <Leader>e :<C-U>setlocal modifiable noreadonly<CR>

" \f shows the current 'formatoptions' at a glance
nnoremap <Leader>f :<C-U>setlocal formatoptions?<CR>

" \F reloads filetype plugins
nnoremap <Leader>F :<C-U>doautocmd filetypedetect BufRead<CR>

" \g changes directory to the current file's location
nnoremap <Leader>g :<C-U>cd %:h<Bar>pwd<CR>

" \h toggles highlighting search results
nnoremap <Leader>h :<C-U>set hlsearch! hlsearch?<CR>

" \H shows command history
nnoremap <Leader>H :<C-U>history :<CR>

" \i toggles showing matches as I enter my pattern
nnoremap <Leader>i :<C-U>set incsearch! incsearch?<CR>

" \j jumps to buffers ("jetpack")
nnoremap <Leader>j :<C-U>buffers<CR>:buffer<Space>

" \k shows my marks
nnoremap <Leader>k :<C-U>marks<CR>

" \l toggles showing tab, end-of-line, and trailing white space
nnoremap <Leader>l :<C-U>setlocal list! list?<CR>
xnoremap <Leader>l :<C-U>setlocal list! list?<CR>gv

" \L toggles 'colorcolumn' showing 'textwidth'
nnoremap <Leader>L :<C-U>ToggleFlagLocal colorcolumn +1<CR>
xnoremap <Leader>L :<C-U>ToggleFlagLocal colorcolumn +1<CR>gv

" \m shows normal maps
nnoremap <Leader>m :<C-U>map<CR>
" \M shows buffer-local normal maps
nnoremap <Leader>M :<C-U>map <buffer><CR>

" \n toggles line number display
nnoremap <Leader>n :<C-U>setlocal number! number?<CR>
xnoremap <Leader>n :<C-U>setlocal number! number?<CR>gv
" \N toggles position display in bottom right
nnoremap <Leader>N :<C-U>set ruler! ruler?<CR>
xnoremap <Leader>N :<C-U>set ruler! ruler?<CR>gv

" \o opens a line below in paste mode
nmap <Leader>o <Plug>(PasteOpenBelow)
" \O opens a line above in paste mode
nmap <Leader>O <Plug>(PasteOpenAbove)

" \p toggles paste mode
nnoremap <Leader>p :<C-U>set paste! paste?<CR>

" \P creates the path to the current file
nnoremap <Leader>P :<C-U>call mkdir(expand('%:h'), 'p')<CR>

" \q formats the current paragraph
nnoremap <Leader>q gqap

" \r acts as a replacement operator
nmap <Leader>r <Plug>(ReplaceOperator)
xmap <Leader>r <Plug>(ReplaceOperator)

" \R reloads ~/.vimrc
nnoremap <Leader>R :<C-U>source $MYVIMRC<CR>

" \s toggles spell checking
nnoremap <Leader>s :<C-U>setlocal spell! spell?<CR>

" \S shows loaded scripts
nnoremap <Leader>S :<C-U>scriptnames<CR>

" \t shows current filetype
nnoremap <Leader>t :<C-U>setlocal filetype?<CR>
" \T clears filetype
nnoremap <Leader>T :<C-U>setlocal filetype=<CR>

" \u sets US English spelling (compare \z)
nnoremap <Leader>u :<C-U>setlocal spelllang=en_us<CR>

" \v shows all global variables
nnoremap <Leader>v :<C-U>let g: v:<CR>
" \V shows all local variables
nnoremap <Leader>V :<C-U>let b: t: w:<CR>

" \w toggles wrapping
nnoremap <Leader>w :<C-U>setlocal wrap! wrap?<CR>
xnoremap <Leader>w :<C-U>setlocal wrap! wrap?<CR>gv

" \x strips trailing whitespace via a custom plugin
nmap <Leader>x :StripTrailingWhitespace<CR>
xmap <Leader>x :StripTrailingWhitespace<CR>

" \X squeezes repeated blank lines via a custom plugin
nmap <Leader>X :SqueezeRepeatBlanks<CR>
xmap <Leader>X :SqueezeRepeatBlanks<CR>

" \y shows all registers
nnoremap <Leader>y :<C-U>registers<CR>

" \z sets NZ English spelling (compare \u)
nnoremap <Leader>z :<C-U>setlocal spelllang=en_nz<CR>

" \= runs the whole buffer through =, preserving position
nnoremap <Leader>= m`1G=G``
" \+ runs the whole buffer through gq, preserving position
nnoremap <Leader>+ m`1GgqG``

" \. runs the configured make program into the location list
nnoremap <Leader>. :<C-U>lmake!<CR>

" \< and \> adjust indent of last edit; good for pasting
nnoremap <Leader><lt> :<C-U>'[,']<lt><CR>
nnoremap <Leader>> :<C-U>'[,']><CR>

" \_ uses last changed or yanked text as an object
onoremap <Leader>_ :<C-U>normal! `[v`]<CR>

" \% uses entire buffer as an object
onoremap <Leader>% :<C-U>normal! 1GVG<CR>

" \{ and \} move to lines with non-space chars before current column
map <Leader>{ <Plug>(VerticalRegionUp)
sunmap <Leader>{
map <Leader>} <Plug>(VerticalRegionDown)
sunmap <Leader>}

" \/ types :vimgrep for me ready to enter a search pattern
nnoremap <Leader>/ :<C-U>vimgrep /\c/j **<S-Left><S-Left><Right>
" \? types :lhelpgrep for me ready to enter a search pattern
nnoremap <Leader>? :<C-U>lhelpgrep \c<S-Left>

" \\ escapes regex metacharacters
nmap <Leader>\ <Plug>(RegexEscape)
xmap <Leader>\ <Plug>(RegexEscape)

" \DEL deletes the current buffer
nnoremap <Leader><Delete> :bdelete<CR>
" \INS edits a new buffer
nnoremap <Leader><Insert> :<C-U>enew<CR>

" \TAB toggles 'autoindent'
nnoremap <Leader><Tab> :<C-U>setlocal autoindent! autoindent?<CR>

" Execution mappings; each of these clobbers register z

" \@ executes line in normal mode
nnoremap <Leader>@ ^"zyg_@z
" \: executes line in command mode
nnoremap <Leader>: ^"zyg_:<C-R>z<CR>
" \! executes line with 'shell'
nnoremap <Leader>! ^"zyg_:!<C-R>z<CR>

" Things I almsot always type wrnog
inoreabbrev almsot almost
inoreabbrev wrnog wrong
inoreabbrev Fielding Feilding
